name: Trivy Security Checks

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  # schedule:
  #   - cron: '0 1 * * *'

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------- FS-Scan (Code + Dependencies + Secrets) ----------
      - name: FS scan (Schwachstellen & Secrets)
        uses: aquasecurity/trivy-action@0.18.0
        with:
          scan-type: fs
          scan-ref: .
          severity: CRITICAL,HIGH
          exit-code: 0
          format: sarif
          output: trivy-fs.sarif

      # ---------- Docker-Image bauen ----------
      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ github.sha }} .

      # ---------- Image-Scan ----------
      - name: Image scan (Container-Schwachstellen)
        uses: aquasecurity/trivy-action@0.18.0
        with:
          scan-type: image
          image-ref: ghcr.io/${{ github.repository }}:${{ github.sha }}
          severity: CRITICAL,HIGH
          exit-code: 0
          format: sarif
          output: trivy-image.sarif

      # ---------- IaC-Scan (K8s-Manifeste & Dockerfile) ----------
      - name: IaC scan (K8s + Dockerfile)
        uses: aquasecurity/trivy-action@0.18.0
        with:
          scan-type: config
          scan-ref: k8s
          severity: CRITICAL,HIGH
          exit-code: 0
          format: sarif
          output: trivy-config.sarif

      # ---------- Debug: List SARIF files & pick first ----------
      - name: List SARIF files
        run: |
          echo "Gefundene SARIF-Dateien:"
          find . -name '*.sarif'
          FIRST=$(find . -name 'trivy-*.sarif' | head -n1)
          echo "Erste SARIF: $FIRST"
          echo "SARIF_FILE=$FIRST" >> $GITHUB_ENV

      # ---------- SARIF-Ergebnisse hochladen ----------
      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.SARIF_FILE }}

      # ---------- Optional: externer Repo-Scan (auskommentiert) ----------
      # - name: Checkout code-inspector
      #   uses: actions/checkout@v4
      #   with:
      #     repository: CozyBrozy/code-inspector
      #     token: ${{ secrets.CODESCANNER_PAT }}
      #     path: code-inspector
      #
      # - name: FS scan external (Schwachstellen & Secrets)
      #   uses: aquasecurity/trivy-action@0.18.0
      #   with:
      #     scan-type: fs
      #     scan-ref: code-inspector
      #     severity: CRITICAL,HIGH
      #     exit-code: 1
      #     format: sarif
      #     output: trivy-fs-external.sarif
      #
      # ... weitere externe Scan-Schritte ...
